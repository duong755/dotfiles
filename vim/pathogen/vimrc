execute pathogen#infect()

syntax on
filetype plugin indent on

set encoding=UTF-8
set number
set cursorline
set smartcase
set autoread
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab
set smartindent
set autoindent
set wrap
set splitbelow
set splitright
set showcmd
set showmatch
set foldmethod=manual
set magic
set incsearch
set hlsearch

set guifont=JetBrainsMono\ Nerd\ Font\ 12

colorscheme seoul256

" editorconfig-vim
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
let g:loaded_EditorConfig = 1

" nerdtree
let g:NERDTreeWinSize = 24
let g:NERDTreeGitStatusEnable = 1

" tmux navigator
let g:tmux_navigator_save_on_switch = 2

" nerdcommenter
let g:NERDSpaceDelims = 1

" airline, airline-theme
let g:airline_theme = 'onedark'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:ariline#extensions#ale#enabled = 1
let g:airline_powerline_fonts = 1

" latex
let g:tex_flavor = 'latex'

" ale
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_enabled = 1
let g:ale_completion_autoimport = 1
let g:ale_linters = {
\ 'javascript': ['eslint', 'prettier'],
\ 'python': ['black']
\}

" vim-test
let test#strategy = 'vimterminal'

autocmd FileType cs,java,python,tex,makefile,xml setlocal shiftwidth=4 tabstop=4
autocmd FileType makefile setlocal expandtab=0
autocmd BufNewFile,BufRead *.latexmkrc,latexmkrc set filetype=perl
autocmd BufNewFile,BufRead *.cls set filetype=tex
autocmd BufNewFile,BufRead *.sty set filetype=tex

if executable('pylsp')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pylsp',
        \ 'cmd': {server_info->['pylsp']},
        \ 'allowlist': ['python'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" keymap for nerdtree and nerdtree tab
nnoremap <silent>ntf  :<C-u>NERDTreeFocus<CR>
nnoremap <silent>nto  :<C-u>NERDTreeOpen<CR>
nnoremap <silent>ntc  :<C-u>NERDTreeClose<CR>
nnoremap <silent>nta  :<C-u>NERDTreeToggle<CR>
nnoremap <silent>ntto :<C-u>NERDTreeTabsOpen<CR>
nnoremap <silent>nttc :<C-u>NERDTreeTabsClose<CR>
nnoremap <silent>nttt :<C-u>NERDTreeTabsToggle<CR>

" keymap for vim-itest
nnoremap <silent> <leader>tn :<C-u>TestNearest<CR>
nnoremap <silent> <leader>tf :<C-u>TestFile<CR>
nnoremap <silent> <leader>ts :<C-u>TestSuite<CR>
nnoremap <silent> <leader>tl :<C-u>TestLast<CR>
nnoremap <silent> <leader>tv :<C-u>TestVisit<CR>

highlight Normal guibg=NONE ctermbg=NONE

